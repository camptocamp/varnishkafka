#######################################################################
#                                                                     #
#                varnishkafka configuration file                      #
#                                                                     #
#                                                                     #
#######################################################################
#                                                                     #
# Syntax:                                                             #
# <property-name> = <value>                                           #
#                                                                     #
# Boolean property values:                                            #
#   >0, "true", "yes", "on" - interpreted as true                     #
#  everything else          - interpreted as false                    #
#                                                                     #
#######################################################################
                                                                      #
                                                                      #
                                                                      #
#######################################################################
#                                                                     #
# Varnish log formatting                                              #
#                                                                     #
# format.type - format output type, one of:                           #
#  string     - ASCII string output                                   #
#  json       - JSON output                                           #
#                                                                     #
#                                                                     #
# format - format string                                              #
#  %X                                                                 #
#   where 'X' is one of the standard varnishncsa(1) formatters:       #
#   %b, %D, %T, %H, %h, %{..}i, %l, %m, %q, %{..}o, %s, %t, %U,       #
#   %u, %{..}x, %n                                                    #
#   Example: %u                                                       #
#                                                                     #
#                                                                     #
#  %{VAR}X                                                            #
#    Name-Value tokens where X is 'x', 'i' or 'o' and 'VAR' is the    #
#    Name to extract the value for.                                   #
#    Example: %{User-Agent}i                                          #
#                                                                     #
#                                                                     #
#  %{?DEFAULT@FIELD!OPTION!OPTION..}X                                 #
#    where 'X' is any formatter,                                      #
#                                                                     #
#    'DEFAULT' is the default string to use if no tag was matched,    #
#     the default default string is "-".                              #
#                                                                     #
#    'FIELD' is the field name to use with the JSON formatter.        #
#     i.e., "%{@host}l" will be JSON encoded as: {"host":"1.2.3.4"}   #
#                                                                     #
#    'OPTION' is one or more of the formatting options:               #
#        escape - escape non-printable characters to \<octalcode>     #
#                 and \t\n\r\v\f " to their canonical                 #
#                 backslashed notations (\t\n\r\v\f\"\ ).             #
#        num    - for typed formatters, such as JSON, try to encode   #
#                 the value as a number.                              #
#                                                                     #
#                                                                     #
#    This syntax can be combined with %{VAR}X.                        #
#    Example: %{User-Agent?Mozilla!escape}i                           #
#             %{?nouser}u                                             #
#             %{!escape}q                                             #
#             %{@host}l                                               #
#                                                                     #
#                                                                     #
#                                                                     #
#  Additional formatter specials:                                     #
#    %{<strftime-format>}t - format timestamp according to supplied   #
#                            strftime(3) compatible format string.    #
#    %{Varnish:xid}x       - transaction id of client request.        #
#                            Same value as X-Varnish header           #
#                                                                     #
#                                                                     #
#                                                                     #
#  Non %-prefixed strings are copied verbatim to the                  #
#  output log string.                                                 #
#    Example: "User: %u;"   would render "User: snaps;"               #
#                                                                     #
#                                                                     #
#######################################################################

# Standard string formatter
format.type = string
format = %l        %n        %t        %{Varnish:time_firstbyte}x        %h        %{Varnish:handling}x/%s        %b        %m        http://%{Host}i%U%q        -        %{Content-Type}o        %{Referer}i        %{X-Forwarded-For}i        %{User-agent!escape}i        %{Accept-Language}i        %{X-Analytics}o

# JSON formatter
# JSON field names are specified with %{@FIELDNAME}x
#format.type = json
#format = %{@host}l %{@seq_num!num}n %{@timestamp}t %{Varnish:time_firstbyte@response!num}x %{@ip}h %{Varnish:handling@handling}x %{@http_status}s %{@bytes_sent!num}b %{@request_method}m %{Host@host}i %{@uri}U %{@query}q %{Content-Type@mime_type}o %{Referer@referer}i %{X-Forwarded-For@x_forwarded_for}i %{User-Agent@user_agent}i %{Accept-Language@accept_language}i %{X-Analytics@x_analytics}o



# Optional secondary formatting.
#   'output = kafka':  The rendered 'format.key' will be provided as the
#                      Kafka message Key
#   'output = string': Print string to stdout.
# Supports the same formating and type as 'format' and 'format.type'.
#
format.key.type = string
format.key = %{%s}t



# Where to output varnish log lines:
#  kafka  - (default) send to kafka broker
#  stdout - just print to stdout (behave like varnishncsa)
#  null   - (test) collect all tags specified by format but dont output anything
output = kafka


# The maximum accepted log tag size.
# Larger tags will be truncated to this size.
# Defaults to 2048
#tag.size.max = 2048


# EXPERIMENTAL
# Indicates if the log tag data read from VSL files should be copied instantly
# when read (true). If this is set to false the data is assumed to be
# persistent (for the duration of collecting and formatting a single request)
# and no copies will be made, thus improving performance.
#
# NOTE:
#   Must be set to true for offline files (-r file..) due to the way
#   libvarnishapi reads its data.
logline.data.copy = true


# TUNING
# Logline cache hash tuning
# 'logline.hash.size * logline.hash.max' dictates the maximum number of
# cached logline entries in memory.

# Number of hash buckets (keyed by log id).
# Higher number yields more performance at the expense of memory.
# Set this to avg_requests_per_second / 5.
# Defaults to 5000
#logline.hash.size = 5000

# Maximum number of loglines per hash bucket
# Higher number yields less memory consumption at the expense of performance.
# Set this to avg_requests_per_second / logline.hash.size.
# Defaults to 5
#logline.hash.max = 5

# Size of per logline scratch buffer.
# The scratch buffer is used as a temporary storage space while
# collecting tags for the log line.
# If the scratch size is too small the logline tag match will be incomplete.
# Defaults to 4096 bytes.
#logline.scratch.size = 4096


# Start for sequence number (%n)
# Either a number, or the string "time" which will set it to the current
# unix time in seconds multiplied by 1,000,000.
# Defaults to 0.
sequence.number = time


#
# varnishkafka log messages configuration
# Debugging, error reporting, etc, not to be confused with varnish logs.
#

# varnishkafka log level (1 = emergencies .. 7 = debug)
log.level = 6

# specify log output (multiples allowed)
log.stderr = true
log.syslog = true

# Maximum number of error logs produced per log.rate.period seconds
# This setting is applied per error type.
# log.rate.max defaults to 100
# log.rate.period defaults to 60
#log.rate.max = 100
#log.rate.period = 60

# Kafka: log message delivery failures (requires required.acks > 0)
log.kafka.msg.error = true

#
# JSON Statistics
#
# Statistics is collected from varnishkafka itself as well as librdkafka
# Each JSON object has a top level key of either 'varnishkafka' or
# 'kafka' to indicate which type of statistics the object contains.
# Each line is a valid JSON object.
#

# Statistics output interval
# Defaults to 60 seconds, use 0 to disable.
#log.statistics.interval = 60

# Statistics output file
# Defaults to /tmp/varnishkafka.stats.json
#log.statistics.file = /tmp/varnishkafka.stats.json


# daemonize varnishkafka (boolean)
daemonize = false


# Varnish-related configuration options:

# -q VSLQ query (https://www.varnish-cache.org/docs/4.1/reference/vsl-query.html)
# varnish.arg.q = not ReqHeader:Content-type

# -n: varnishd instance to get logs from.
# varnish.arg.n = frontend

# -N: VSM filename to read logs from.
# varnish.arg.N = /this/is/a/path


#######################################################################
#                                                                     #
# Kafka configuration                                                 #
#                                                                     #
# Kafka configuration properties are prefixed with "kafka."           #
# and topic properties are prefixed with "kafka.topic.".              #
#                                                                     #
# For the full range of Kafka handle and topic configuration          #
# properties, see:                                                    #
#  http://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md #
#                                                                     #
# And the Apache Kafka configuration reference:                       #
#  http://kafka.apache.org/08/configuration.html                      #
#                                                                     #
#######################################################################

# Initial list of kafka brokers
kafka.metadata.broker.list = localhost:9092

# Maximum number of messages allowed on the local producer queue
# Defaults to 1000000
kafka.queue.buffering.max.messages = 1000000

# Maximum number of retries per messageset.
kafka.message.send.max.retries = 3


#
# Topic configuration
#

# Topic to produce messages to
kafka.topic = varnish

# Partition (-1: random, else one of the available partitions)
kafka.partition = -1


# Required number of acks
kafka.topic.request.required.acks = 1

# Local message timeout (milliseconds)
kafka.topic.message.timeout.ms = 60000

# SO_SNDBUFF Socket send buffer size. System default is used if 0.
# Default is 0.
#kafka.socket.send.buffer.bytes = 0

#
# Builtin partitioners (Future. Not implemented)
#

# partition on user name
#kafka.partitioner = crc32(%u)

# partition on client IP
#kafka.partitioner = iphash(%{X-Forwarded-For}i)



